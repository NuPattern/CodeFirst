using System;

namespace NuPattern
{
    /// <summary>
    /// Represents the method that will handle an event.
    /// </summary>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    /// <typeparam name="TValue">The type of value generated by the event.</typeparam>
    public delegate void ValueEventHandler<TValue>(object sender, ValueEventArgs<TValue> e);

    /// <summary>
    /// Provides a static factory method for creating the arguments
    /// class for events that publish a single value.
    /// </summary>
    public static class ValueEventArgs
    {
        /// <summary>
        /// Creates an arguments class for the given value.
        /// </summary>
        /// <remarks>
        /// This helper static method makes it possible to avoid specifying 
        /// the type of the event args and just pass its value.
        /// </remarks>
        public static ValueEventArgs<TValue> Create<TValue>(TValue value)
        {
            return new ValueEventArgs<TValue>(value);
        }
    }

    /// <summary>
    /// Arguments for events that publish a single value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    public class ValueEventArgs<TValue> : EventArgs
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValueEventArgs{TValue}"/> class.
        /// </summary>
        /// <param name="value">The value.</param>
        public ValueEventArgs(TValue value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Gets the value.
        /// </summary>
        public TValue Value { get; private set; }

        /// <summary>
        /// Performs an explicit conversion from <see cref="ValueEventArgs{TValue}" /> to a value.
        /// </summary>
        public static explicit operator TValue(ValueEventArgs<TValue> args)
        {
            return args.Value;
        }

        /// <summary>
        /// Performs an implicit conversion from a value to <see cref="ValueEventArgs{TValue}" />.
        /// </summary>
        public static implicit operator ValueEventArgs<TValue>(TValue value)
        {
            return new ValueEventArgs<TValue>(value);
        }
    }
}
